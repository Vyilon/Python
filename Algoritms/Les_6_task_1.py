#Для каждого упражнения написать программную реализацию.
# Код пишите в файлах с расширением .py в кодировке UTF-8 (в PyCharm работает по умолчанию). Каждую задачу необходимо сохранять в отдельный файл. Рекомендуем использовать английские имена, например, les_6_task_1, les_6_task_2, и т.д.
# Для оценки «Отлично» необходимо выполнить все требования, указанные в задании и примечаниях.
# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
# проанализировать 3 варианта и выбрать оптимальный;
#
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.
# Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной, а проявили творчество, фантазию и создали универсальный код для замера памяти.

#На примере задачи 3 из второго урока.  Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
#Например, если введено число 3486, надо вывести 6843.
import sys
print(sys.version, sys.platform)

def sum(x):
    sum_size = 0
    for value in x.values():
        sum_size += sys.getsizeof(value, default=0)
        try:
            if type(value) in dict:
                for itm in value.items():
                    sum_size += sys.getsizeof(itm, default=0)
            elif not isinstance(value, str):
                for itm in value:
                    sum_size += sys.getsizeof(itm, default=0)
        except TypeError:
            pass

    return sum_size

def numbers1():
    num = 5667474247
    num = str(num)
    new_num = ''
    for i in range((len(num))):
        new_num += num[(len(num)-1) - i]
    x = locals()
    return sum(x)

def numbers2():
    num = 5667474247
    result = 0
    while num > 0:
        result = result * 10 + num % 10
        num = num // 10
    x = locals()
    return sum(x)

def numbers3():
    num = 5667474247
    num = str(num)
    result = num[::-1]
    x = locals()
    return sum(x)

print(numbers1())
print(numbers2())
print(numbers3())

#C точки зрения использования памяти самый эффективный код в функции №2